# This config file contains the configuration for all tools used 
# during the build process

# You can add your own tools or remove the ones that are already
# here as you please!

# For a tool to work with callisto, all it needs to do is return 
# a non-zero exit code if it fails and zero if it succeeds. For 
# the tool to also work with Quickbuild, it should output a file
# named .dependencies containing paths to the files it depends on, 
# so that callisto can reapply your tool if any of those files 
# change!

[tools]

[tools.FLIPS]
# Path to FLIPS executable
executable = "tools/flips/flips.exe"

[tools.LunarMagic]
# Path to Lunar Magic executable
executable = "tools/lunar_magic/Lunar Magic.exe"

[tools.generic.ToolDownloader]

directory = "tools/tool_downloader"
executable = "tool_downloader.bat"
options = "callisto"
pass_rom = false

dependency_report_file = ".dependencies"

static_dependencies = [
	{ path = "tool_downloader.bat", policy = "rebuild" },
	# { path = "tool_downloader.sloink", policy = "sfsdfsd" },
]

# You can use [tools.generic.my_tool] to specify any tool you want, 
# not just the ones included here
# You can then use it in the build order using the name you gave it, 
# i.e. "my_tool"
[tools.generic.PIXI]

# Working directory of the tool, all other paths in this tool's section
# are relative to this path
directory = "tools/pixi"

# Executable file of the tool
executable = "pixi.exe"

# Options to pass to the tool, by default, the path to the temporary
# ROM is passed to the tool right after these
options = "-l ../../tools/pixi/list.txt"

# Uncomment to not pass path to temporary ROM to the tool
# pass_rom = false

# static_dependencies and dependency_report_file are only
# used for Quickbuild

# Files/folders the tool relies on/inserts in any case
# Path is the path to the file/folder, policy lets you 
# specify what to do if the file/folder changes, valid
# policies are "rebuild" or "reinsert", "reinsert" is 
# the default and will only reinsert this tool if a 
# change is detected, while "rebuild" will cause a 
# full rebuild instead
#
# For folders, any change to a file in the folder as well 
# as addition or deletion of files to/from the folder will 
# trigger the corresponding policy
#
# For files, just saving them will cause the policy 
# to trigger
static_dependencies = [
	{ path = "pixi.exe", policy = "rebuild" },

	# Omitting policy is the same as specifying policy = "reinsert"
    { path = "list.txt" }, 

    { path = "asar.dll", policy = "rebuild" }, 
    { path = "NewtonSoft.Json.dll", policy = "rebuild" } ,

	# policy = "reinsert" is not needed here, since it's 
	# the default, but it can still be specified for explicitness
    { path = "routines", policy = "reinsert" },

	# Need to add the "sprites" folder here, because the 
	# dependency report for PIXI won't include .json/.cfg files
    { path = "sprites", policy = "reinsert" }
]

# Path to the dependency report file generated by the 
# customized asar.dll when PIXI is inserted
#
# This will cover all data/code the tool inserts via 
# asar, which means we don't have to specify each 
# and every single .asm file in the static_dependencies
dependency_report_file = ".dependencies"


[tools.generic.GPS]
directory = "tools/gps"
executable = "gps.exe"

static_dependencies = [ 
	{ path = "gps.exe", policy = "rebuild" },
	{ path = "asar.dll", policy = "rebuild"}, 
	{ path = "list.txt" }, 
	{ path = "routines" } 
]
dependency_report_file = ".dependencies"


[tools.generic.UberASM]
directory = "tools/uberasm_tool"
executable = "UberASMTool.exe"
options = "list.txt"

static_dependencies = [
	{ path = "UberASMTool.exe" },
	{ path = "list.txt" }, 
	{ path = "asar.dll", policy = "rebuild" }, 
	{ path = "library" }, 
	{ path = "routines" },
]
dependency_report_file = ".dependencies"


[tools.generic.AddMusicK]
directory = "tools/addmusick"
executable = "AddmusicK.exe"

# AMK doesn't use asar for much, so we need a 
# lot of static dependencies here, sadly
static_dependencies = [ 
    { path = "AddmusicK.exe", policy = "rebuild" },
    { path = "asar.exe", policy = "rebuild" },

    { path = "AddMusic_list.txt" },
    { path = "AddMusic_sample groups.txt" },
    { path = "AddMusic_sound effects.txt" },

    { path = "1DF9" },
    { path = "1DFC" }, 

	{ path = "samples" },
	{ path = "music" }
]
dependency_report_file = ".dependencies"
